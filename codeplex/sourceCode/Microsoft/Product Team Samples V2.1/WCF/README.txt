========================================
WCF Sample
========================================

Last change: 5/23/2012

This sample processes data from a WCF-enabled Observable and streams its
results to a WCF-enabled Observer. The data is CPU performance counter 
samples pushed by a WCF client application, the query calculates the average
CPU usage over a 1s tumbling window, and determines the color code for CPU 
usage level. The result of this query is then sent to the WCF observer 
and displayed through a WPF application using a WCF Duplex connection 
with the observer.


This sample demonstrates the following aspects:

  * Creating Observable/Observer that use WCF for ingress/egress.
  * Using a tumbling window.
  

Configuring the projects in the Sample
 
 * StreamInsightWCFArtifacts assembly
              inproc: no action required
              client/server: Add the assembly generated by project StreamInsightWCFArtifacts to the GAC
              "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Bin\NETFX 4.0 Tools\gacutil.exe" ...\StreamInsightWCFArtifacts.dll
              Restart the SI server
            
 * Configure firewall to allow connections to WCF endpoints used by this application
              A quick and dirty solution is to disable the firewall:
                netsh advfirewall set allprofiles state off

 * Configure endpoint permissions using netsh (more info on http://msdn.microsoft.com/en-us/library/ff518487.aspx)
              A quick and dirty solution is to Run Visual Studio in elevated mode
              No elevation required when running if you use 'netsh' to configure the service:
                for client/server (Server.Connect) scenario, use netsh http add urlacl user="NT SERVICE\MSSI$Default" url=http://+:port/StreamInsight/
                for inproc (Server.Create) scenario, use netsh http add urlacl user=%USERDOMAIN%\%USERNAME% url=http://+:port/StreamInsight/

 * Update app.config for WCF-related projects if necessary
              On event consumer (Dashboard app)
                <client>
                   <endpoint address="http://localhost:8088/StreamInsight/wcf/Sink/WcfObserverService"
              On event generator (Console app)
                <client>
                   <endpoint address="http://localhost:8088/StreamInsight/wcf/Source/WcfObservableService"
 
 * Order the launch of multiple projects
    Right click on Solution in Solution Explorer > Properties, then Choose 'Multiple startup projects' radio button.
    Set 'Action' to 'Start' for the following projects, and order them as follows:
             StreamInsight WCF Demo
             Event Generator
             Dashboard
 
 * Depending on the deployment configuration (inproc, client/server), you might hit WCF Communication Exceptions, 
   a workaround is to increase the wait time (Thread.Sleep) in 'WcfEventGenerator' and 'WPF WCF Dashboard'.
 